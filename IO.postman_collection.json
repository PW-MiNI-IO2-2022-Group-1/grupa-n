{
	"info": {
		"_postman_id": "59b3c284-c748-4844-8659-1caf044a3dcb",
		"name": "IO",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Patient",
			"item": [
				{
					"name": "Login as a patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"if(jsonData.token) {\r",
									"    pm.globals.set(\"IO_PATIENT_TOKEN\", jsonData.token);\r",
									"}\r",
									"else {\r",
									"    pm.globals.set(\"IO_PATIENT_TOKEN\", \"\");    \r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a token string\", function () {\r",
									"    pm.expect(jsonData.token).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a patient object\", function () {\r",
									"    pm.expect(jsonData.patient).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Patient's email is correct\"), function () {\r",
									"    pm.expect(jsonData.email).to.equal(\"new@patient.com\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"new@patient.com\",\r\n  \"password\": \"!Password#123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{IOHostURL}}/patient/login",
							"host": [
								"{{IOHostURL}}"
							],
							"path": [
								"patient",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authentication test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Success equals true\", function() {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.success).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{IOHostURL}}/patient/auth-test",
							"host": [
								"{{IOHostURL}}"
							],
							"path": [
								"patient",
								"auth-test"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Registered patient has id\", function () { \r",
									"    pm.expect(jsonData.id).to.be.a('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Returned values are correct\", function () { \r",
									"    pm.expect(jsonData.email).to.be.equal('new@patient.com')\r",
									"    pm.expect(jsonData.pesel).to.be.equal('94100613369')\r",
									"    pm.expect(jsonData.firstName).to.be.equal('New')\r",
									"    pm.expect(jsonData.lastName).to.be.equal('Patient')\r",
									"});\r",
									"\r",
									"pm.test(\"Patient has address object\", function () { \r",
									"        pm.expect(jsonData.address).to.be.a('object');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"New\",\n  \"lastName\": \"Patient\",\n  \"pesel\": \"94100613369\",\n  \"email\": \"new@patient.com\",\n  \"password\": \"!Password#123\",\n  \"address\": {\n    \"city\": \"Warszawa\",\n    \"zipCode\": \"01-202\",\n    \"street\": \"Jaktorowska\",\n    \"houseNumber\": \"14\",\n    \"localNumber\": \"5a\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{IOHostURL}}/patient/registration",
							"host": [
								"{{IOHostURL}}"
							],
							"path": [
								"patient",
								"registration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"// Zwracany address jest nullem bo nie jest zaimplementowany w Repository\r",
									"pm.test(\"Edited firstName is correct\", function() {\r",
									"    pm.expect(jsonData.firstName).to.equal(\"EditedNew\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"EditedNew\",\r\n  \"lastName\": \"Patient\",\r\n  \"pesel\": \"94100613369\",\r\n  \"email\": \"edited@patient.com\",\r\n  \"password\": \"!Password#123\",\r\n  \"address\": {\r\n    \"city\": \"Warszawa\",\r\n    \"zipCode\": \"01-202\",\r\n    \"street\": \"Jaktorowska\",\r\n    \"houseNumber\": \"14\",\r\n    \"localNumber\": \"5a\"\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{IOHostURL}}/patient/account",
							"host": [
								"{{IOHostURL}}"
							],
							"path": [
								"patient",
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{IOHostURL}}/patient/account",
							"host": [
								"{{IOHostURL}}"
							],
							"path": [
								"patient",
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show vaccination slots",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response is an array\", function () { \r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{IOHostURL}}/patient/vaccination-slots",
							"host": [
								"{{IOHostURL}}"
							],
							"path": [
								"patient",
								"vaccination-slots"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show vaccines",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response is an array\", function () { \r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{IOHostURL}}/patient/vaccines?disease=Flu",
							"host": [
								"{{IOHostURL}}"
							],
							"path": [
								"patient",
								"vaccines"
							],
							"query": [
								{
									"key": "disease",
									"value": "Flu"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{IO_PATIENT_TOKEN}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Doctor",
			"item": [
				{
					"name": "Vaccination slots",
					"item": [
						{
							"name": "Create new vaccination slot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Success equals true\", function() {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"    // jest bez Z data, moze powinnismy to naprawic\r",
											"    pm.globals.set(\"new_slot_date\", \"2022-07-01T10:00:00\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"date\": \"2022-07-01T10:00:00Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{IOHostURL}}/doctor/vaccination-slots",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"doctor",
										"vaccination-slots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show vaccination slots",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Has pagination object\", function () { \r",
											"    pm.expect(jsonData.pagination).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test(\"Has data array\", function () { \r",
											"    pm.expect(jsonData.data).to.be.an('array');\r",
											"});\r",
											"\r",
											"if (jsonData.data.length > 0) {\r",
											"    pm.test(\"Slot in array has id which is a number\", function () { \r",
											"        pm.expect(jsonData.data[0].id).to.be.a('number');\r",
											"    });\r",
											"    pm.test(\"Slot in array has vaccination object\", function () { \r",
											"        pm.expect(jsonData.data[0].vaccination).to.be.a('object');\r",
											"    });\r",
											"    for (const slot of jsonData.data) {\r",
											"        if (slot.date === pm.globals.get(\"new_slot_date\")) {\r",
											"            pm.globals.set(\"new_slot_id\", slot.id);\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{IOHostURL}}/doctor/vaccination-slots?page=1",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"doctor",
										"vaccination-slots"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "OPTIONAL | default 1"
										},
										{
											"key": "onlyReserved",
											"value": "1",
											"description": "OPTIONAL | 1 - only reserved | 0 - only not reserved",
											"disabled": true
										},
										{
											"key": "startDate",
											"value": "2022-03-18T14:15:00Z",
											"description": "OPTIONAL",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "2022-05-20T14:15:00Z",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete vaccination slot",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{IOHostURL}}/doctor/vaccination-slots/{{new_slot_id}}",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"doctor",
										"vaccination-slots",
										"{{new_slot_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vaccinate patient",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"CANCELED\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{IOHostURL}}/doctor/vaccination-slots/1",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"doctor",
										"vaccination-slots",
										"1"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login as a doctor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"if(jsonData.token) {\r",
									"    pm.globals.set(\"IO_DOCTOR_TOKEN\", jsonData.token);\r",
									"}\r",
									"else {\r",
									"    pm.globals.set(\"IO_DOCTOR_TOKEN\", \"\");    \r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a token string\", function () {\r",
									"    pm.expect(jsonData.token).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a doctor object\", function () {\r",
									"    pm.expect(jsonData.doctor).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"doctor@localhost.com\",\r\n  \"password\": \"doctor1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{IOHostURL}}/doctor/login",
							"host": [
								"{{IOHostURL}}"
							],
							"path": [
								"doctor",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authentication test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Success equals true\", function() {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.success).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{IOHostURL}}/doctor/auth-test",
							"host": [
								"{{IOHostURL}}"
							],
							"path": [
								"doctor",
								"auth-test"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{IO_DOCTOR_TOKEN}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "Settings",
					"item": [
						{
							"name": "Get settings",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{IOHostURL}}/admin/settings",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"admin",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set settings",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"bugEmail\": \"bugEmail@szczepiania.pw\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{IOHostURL}}/admin/settings",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"admin",
										"settings"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Doctor",
					"item": [
						{
							"name": "Delete Doctor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Success equals true\", function() {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{IOHostURL}}/admin/doctors/{{created_doctor}}",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"admin",
										"doctors",
										"{{created_doctor}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Doctor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Created doctor has id\", function () { \r",
											"    pm.expect(jsonData.id).to.be.a('number');\r",
											"    pm.globals.set(\"created_doctor\", jsonData.id);\r",
											"});\r",
											"\r",
											"pm.test(\"Returned values are correct\", function () { \r",
											"    pm.expect(jsonData.email).to.be.equal('new@doctor.com')\r",
											"    pm.expect(jsonData.firstName).to.be.equal('New')\r",
											"    pm.expect(jsonData.lastName).to.be.equal('Doc')\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstName\": \"New\",\n  \"lastName\": \"Doc\",\n  \"email\": \"new@doctor.com\",\n  \"password\": \"!Password#123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{IOHostURL}}/admin/doctors",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"admin",
										"doctors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Doctor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Edited firstName is correct\", function() {\r",
											"    pm.expect(jsonData.firstName).to.equal(\"EditedNew\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"EditedNew\",\r\n    \"lastName\": \"Doc\",\r\n    \"email\": \"new@doctor.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{IOHostURL}}/admin/doctors/{{created_doctor}}",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"admin",
										"doctors",
										"{{created_doctor}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Doctor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Doctor has id\", function () { \r",
											"    pm.expect(jsonData.id).to.be.a('number');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{IOHostURL}}/admin/doctors/{{created_doctor}}",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"admin",
										"doctors",
										"{{created_doctor}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Doctors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Has pagination object\", function () { \r",
											"    pm.expect(jsonData.pagination).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test(\"Has data array\", function () { \r",
											"    pm.expect(jsonData.data).to.be.an('array');\r",
											"});\r",
											"\r",
											"if (jsonData.data.length > 0) {\r",
											"    pm.test(\"Doctor in array has id which is a number\", function () { \r",
											"        pm.expect(jsonData.data[0].id).to.be.a('number');\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{IOHostURL}}/admin/doctors?page=1",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"admin",
										"doctors"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Patient",
					"item": [
						{
							"name": "Show Patients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Has pagination object\", function () { \r",
											"    pm.expect(jsonData.pagination).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test(\"Has data array\", function () { \r",
											"    pm.expect(jsonData.data).to.be.an('array');\r",
											"});\r",
											"\r",
											"if (jsonData.data.length > 0) {\r",
											"    pm.test(\"Patient in array has id which is a number\", function () { \r",
											"        pm.expect(jsonData.data[0].id).to.be.a('number');\r",
											"    });\r",
											"}\r",
											"\r",
											"pm.globals.set(\"patient_in_admin\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{IOHostURL}}/admin/patients?page=1",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"admin",
										"patients"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Patient",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{IOHostURL}}/admin/patients/-3",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"admin",
										"patients",
										"-3"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Edited pesel is correct\", function() {\r",
											"    pm.expect(jsonData.pesel).to.equal(\"12354678901\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"pesel\": \"12354678901\",\r\n    \"address\": {\r\n        \"id\": -1,\r\n        \"city\": \"Warszawa\",\r\n        \"zipCode\": \"00-661\",\r\n        \"street\": \"plac Politechniki\",\r\n        \"houseNumber\": \"1\",\r\n        \"localNumber\": \"\"\r\n    },\r\n    \"email\": \"patient@localhost.com\",\r\n    \"firstName\": \"Default\",\r\n    \"lastName\": \"Patient\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{IOHostURL}}/admin/patients/{{patient_in_admin}}",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"admin",
										"patients",
										"{{patient_in_admin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Patient has an id which is a number\", function () { \r",
											"        pm.expect(jsonData.id).to.be.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\"Patient has an address object\", function () { \r",
											"        pm.expect(jsonData.address).to.be.a('object');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{IOHostURL}}/admin/patients/{{patient_in_admin}}",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"admin",
										"patients",
										"{{patient_in_admin}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login as an admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"if(jsonData.token) {\r",
									"    pm.globals.set(\"IO_ADMIN_TOKEN\", jsonData.token);\r",
									"}\r",
									"else {\r",
									"    pm.globals.set(\"IO_ADMIN_TOKEN\", \"\");    \r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a token string\", function () {\r",
									"    pm.expect(jsonData.token).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has an admin object\", function () {\r",
									"    pm.expect(jsonData.admin).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"admin@localhost.com\",\r\n  \"password\": \"admin1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{IOHostURL}}/admin/login",
							"host": [
								"{{IOHostURL}}"
							],
							"path": [
								"admin",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authentication test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Success equals true\", function() {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.success).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{IOHostURL}}/admin/auth-test",
							"host": [
								"{{IOHostURL}}"
							],
							"path": [
								"admin",
								"auth-test"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get vaccinations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Has pagination object\", function () { \r",
									"    pm.expect(jsonData.pagination).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Has data array\", function () { \r",
									"    pm.expect(jsonData.data).to.be.an('array');\r",
									"});\r",
									"\r",
									"if (jsonData.data.length > 0) {\r",
									"    pm.test(\"Vaccination in array has id which is a number\", function () { \r",
									"        pm.expect(jsonData.data[0].id).to.be.a('number');\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "default",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{IOHostURL}}/admin/vaccinations?page=1",
							"host": [
								"{{IOHostURL}}"
							],
							"path": [
								"admin",
								"vaccinations"
							],
							"query": [
								{
									"key": "disease",
									"value": "Fluu",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{IO_ADMIN_TOKEN}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Common",
			"item": [
				{
					"name": "Bugs",
					"item": [
						{
							"name": "Send bug",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Some bug\",\r\n    \"description\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam erat orci, viverra vitae ex ac, fringilla scelerisque tellus. Maecenas rutrum posuere eros, non ultrices turpis. Praesent rutrum faucibus orci sit amet blandit. Vestibulum id congue magna, ut bibendum nulla. Vivamus in lectus laoreet, imperdiet sem at, placerat erat. Morbi ut enim vel erat pulvinar dapibus a quis ex. In id libero urna. Nullam nec auctor lectus.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{IOHostURL}}/bugs",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"bugs"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "value",
						"value": "{{IO_ADMIN_TOKEN}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "Authorization",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "IOHostURL",
			"value": "https://localhost:7296",
			"type": "default"
		}
	]
}